#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(1000, 0)
)
dev.off()
mydata <- as_tibble(fs, use_longnames = T)
mydata$name
filter.po<- expressionFilter(`Pacific Orange-A` > 2.5 & `Pacific Blue-A` > 0.8, filterId = "ISfilter")
stained1 <- Subset(stained1, filter.po)
stained2 <- Subset(stained2, filter.po)
istd <- Subset(istd, filter.po)
#stained2
ggplot(stained2, aes(x=`Pacific Blue-A`, y = `Pacific Orange-A`)) +
geom_bin2d(bins = 300) +
scale_fill_viridis_c(option = "A")
mydata %>%
mutate(Doses = as.numeric(Doses)) %>%
mutate(Doses = as.factor(Doses)) %>%
group_by(Doses, Conditions) %>%
mutate(pS6.MFI = median(`Alexa Fluor 647-A`)) %>%
left_join(veh.0) %>%
mutate(pS6.asinhr = pS6.MFI - pS6.MFI.0) %>%
dplyr::filter(Conditions %in% c("Apoptolidin A", "Ammocidin A", "Apoptolidin A PA", "Apoptolidin H")) %>%
ggplot(aes(x=`Alexa Fluor 647-A`, y = Doses, fill = pS6.asinhr)) +
geom_density_ridges(bandwidth = 0.1, quantile_lines = T, quantiles = 2,
size = 0.25, scale = 1.3)  +
scico::scale_fill_scico(palette = "broc", limits = c(-1.5, 1.5),
guide = guide_colorbar(frame.linewidth = 1,
frame.colour = "black",
ticks.linewidth = 1,
ticks.colour = "black",
barwidth = 1, barheight = 4,
draw.ulim = F,
draw.llim = F)) +
facet_grid(.~Conditions) +
coord_cartesian(xlim = c(-2, 6)) +
scale_x_continuous(breaks = logticks.transformed, labels = logticks.labels, name = "pS6 [Alexa 647]") +
scale_y_discrete(name = "Dose (nM)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(color = "black"),
text = element_text(size = 6, color = "black"),
panel.spacing.x = unit(1, "mm"),
axis.ticks = element_line(size = 0.25))
#?theme
#ggsave("ridgelineplot_pS6.png", width = 6, height = 2, units = "in", dpi = 300)
ggsave("ridgelineplot_pS6.pdf", width = 4, height = 2, units = "in", dpi = 300)
mydata #%>%
mydata <-
cytotidyr:::as.data.frame.flowSet(fs) %>%
as_tibble() %>%
left_join(tags) %>%
dplyr::filter(Conditions != "NA")
logticks <- c(-rep(1:9, times = 5) * rep(10^c(0:4), each = 9),
0,
rep(1:9, times = 5) * rep(10^c(0:4), each = 9))
logticks.transformed <- asinh(logticks/500)
logticks.labels <- logticks.transformed
#table(table(logticks.labels))
logticks.labels[!logticks %in% c(-10^c(1:5), 0, 10^c(1:5))] <- ""
logticks.labels[logticks %in% c(-10^c(1:5), 0, 10^c(1:5))] <- scales::scientific_format()(logticks[logticks %in% c(-10^c(1:5), 0, 10^c(1:5))])
veh.0 <- mydata %>%
mutate(Doses = as.numeric(Doses)) %>%
mutate(Doses = as.factor(Doses)) %>%
group_by(Doses, Conditions) %>%
summarise(pS6.MFI.0 = median(`Alexa Fluor 647-A`)) %>%
ungroup()%>%
dplyr::filter(Doses == 0) %>%
dplyr::select(-Doses)
mydata %>%
mutate(Doses = as.numeric(Doses)) %>%
mutate(Doses = as.factor(Doses)) %>%
group_by(Doses, Conditions) %>%
mutate(pS6.MFI = median(`Alexa Fluor 647-A`)) %>%
left_join(veh.0) %>%
mutate(pS6.asinhr = pS6.MFI - pS6.MFI.0) %>%
dplyr::filter(Conditions %in% c("Apoptolidin A", "Ammocidin A", "Apoptolidin A PA", "Apoptolidin H")) %>%
ggplot(aes(x=`Alexa Fluor 647-A`, y = Doses, fill = pS6.asinhr)) +
geom_density_ridges(bandwidth = 0.1, quantile_lines = T, quantiles = 2,
size = 0.25, scale = 1.3)  +
scico::scale_fill_scico(palette = "broc", limits = c(-1.5, 1.5),
guide = guide_colorbar(frame.linewidth = 1,
frame.colour = "black",
ticks.linewidth = 1,
ticks.colour = "black",
barwidth = 1, barheight = 4,
draw.ulim = F,
draw.llim = F)) +
facet_grid(.~Conditions) +
coord_cartesian(xlim = c(-2, 6)) +
scale_x_continuous(breaks = logticks.transformed, labels = logticks.labels, name = "pS6 [Alexa 647]") +
scale_y_discrete(name = "Dose (nM)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(color = "black"),
text = element_text(size = 6, color = "black"),
panel.spacing.x = unit(1, "mm"),
axis.ticks = element_line(size = 0.25))
#?theme
#ggsave("ridgelineplot_pS6.png", width = 6, height = 2, units = "in", dpi = 300)
ggsave("ridgelineplot_pS6.pdf", width = 4, height = 2, units = "in", dpi = 300)
setwd("C:/Users/benja/OneDrive/Vanderbilt/Bachmann Lab/Notebook/2019/05_May 2019/20190512_probevalidationMV411/Debarcoded-2 Analysis")
mydata.summarized <- mydata %>%
mutate(Doses = as.numeric(Doses)) %>%
#  mutate(Doses = as.factor(Doses)) %>%
group_by(Doses, Conditions) %>%
summarise(pS6.MFI = median(`Alexa Fluor 647-A`)) %>%
left_join(veh.0) %>%
mutate(pS6.asinhr = pS6.MFI - pS6.MFI.0) %>%
dplyr::filter(Conditions != "Oligomycin A")
mydata.summarized <- mydata %>%
dplyr::filter(Conditions %in% c("Apoptolidin A", "Ammocidin A", "Apoptolidin A PA", "Apoptolidin H")) %>%
mutate(Doses = as.numeric(Doses)) %>%
#  mutate(Doses = as.factor(Doses)) %>%
group_by(Doses, Conditions) %>%
summarise(pS6.MFI = median(`Alexa Fluor 647-A`)) %>%
left_join(veh.0) %>%
mutate(pS6.asinhr = pS6.MFI - pS6.MFI.0) %>%
dplyr::filter(Conditions != "Oligomycin A")
library(drc)
drc  <- drm(pS6.asinhr ~ Doses, Conditions,
data = mydata.summarized, fct = LL.4())
pdf(paste0(suffix, ".pdf"), #this line directs the plot to a png
width = 4, height = 4,
pointsize = 10)  #size of text (10pt)
mypal <- RColorBrewer::brewer.pal(12, "Paired")
mypal.ordered  <- mypal[c(10, 9, 4,3, 2, 1, 6)]
pdf(paste0("pS6drc", ".pdf"), #this line directs the plot to a png
width = 3, height = 2,
pointsize = 8)  #size of text (10pt)
#mypal <- c("black", "#43a3c8")
par(mfrow = c(1,1), mar = c(4.1, 4.6, 1.1, 1.1))
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(1000, 0)
)
dev.off()
dev.off()
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(1000, 0)
)
pdf(paste0("pS6drc", ".pdf"), #this line directs the plot to a png
width = 3, height = 2,
pointsize = 8)  #size of text (10pt)
#mypal <- c("black", "#43a3c8")
par(mfrow = c(1,1), mar = c(4.1, 4.6, 1.1, 1.1))
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(1000, 0)
)
dev.off()
dev.off()
dev.off()
pdf(paste0(suffix, ".pdf"), #this line directs the plot to a png
width = 4, height = 4,
pointsize = 10)  #size of text (10pt)
mypal <- RColorBrewer::brewer.pal(12, "Paired")
mypal.ordered  <- mypal[c(10, 9, 4,3, 2, 1, 6)]
pdf(paste0("pS6drc", ".pdf"), #this line directs the plot to a png
width = 3, height = 2,
pointsize = 8)  #size of text (10pt)
#mypal <- c("black", "#43a3c8")
par(mfrow = c(1,1), mar = c(4.1, 4.6, 1.1, 1.1))
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(1000, 0)
)
dev.off()
setwd("~/apoptolidin/ED_Fig1a")
pdf(paste0("pS6drc", ".pdf"), #this line directs the plot to a png
width = 3, height = 2,
pointsize = 8)  #size of text (10pt)
#mypal <- c("black", "#43a3c8")
par(mfrow = c(1,1), mar = c(4.1, 4.6, 1.1, 1.1))
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(1000, 0)
)
dev.off()
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(100, 0)
)
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(10, 0)
)
pdf(paste0("pS6drc", ".pdf"), #this line directs the plot to a png
width = 3, height = 2,
pointsize = 8)  #size of text (10pt)
#mypal <- c("black", "#43a3c8")
par(mfrow = c(1,1), mar = c(4.1, 4.6, 1.1, 1.1))
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(10, 0)
)
dev.off()
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(10, -0.5)
)
pdf(paste0("pS6drc", ".pdf"), #this line directs the plot to a png
width = 3, height = 2,
pointsize = 8)  #size of text (10pt)
#mypal <- c("black", "#43a3c8")
par(mfrow = c(1,1), mar = c(4.1, 4.6, 1.1, 1.1))
plot(drc,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal.ordered, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "Dose (nM)", #x label
ylab = NA,
xt = c(0, 0.1, 1, 10, 100, 1000),
#   yt = c(0, 0.2, 0.4, 0.6, 0.8,1, 1.2),
#     ytlab = c("", "0.2", "", "0.6", "","1.0", ""),
# ylab = "Proliferation (SRB)",
#ylim = c(0,1.1),
legendPos = c(10, -0.3)
)
dev.off()
setwd("~/apoptolidin/Fig2d")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(MSnbase)
library(readr)
library(DEP)
library(ggrepel)
experimental_design <-
tibble(
label = c(
"Vehicle_1",
"Probe_1",
"Competition_1",
"Vehicle_2",
"Probe_2",
"Competition_2"
)
) %>%
separate(label, c("condition", "replicate"), remove = FALSE)
data.tmt <- read_tsv("20190506_Reissman_Bachmann_Apo_TMT6plex_Exp03-08__Proteins.txt" )
data.tidy <- data.tmt %>%
mutate(contaminant = grepl("contaminant", Accession)) %>%
mutate(contaminant = if_else(grepl("KRT", `Gene Symbol`), TRUE, FALSE)) %>%
dplyr::filter(contaminant == FALSE) %>%
dplyr::filter(!is.na(`Gene Symbol`))
data.unique <- make_unique(data.tidy, "Gene Symbol", "Accession", delim = ";")
TMT_columns <-
grep("Abundances", colnames(data.unique)) # get LFQ column numbers
colnames(data.unique)[TMT_columns] <-
paste("TMT", experimental_design$label, sep = ".")
data.unique[TMT_columns]
data.unique <- data.unique %>%
dplyr::filter(!apply(data.unique[TMT_columns], 1, function(vec) {
any(is.na(vec))
}))
data.unique
data_se<- make_se(data.unique, TMT_columns, experimental_design)
#data_se@assays@data[[1]]
data_norm <- normalize_vsn(data_se)
#meanSdPlot(data_norm)
plot_normalization(data_se, data_norm)
#?DEP::test_diff
data_diff <- test_diff(data_norm, type = "all")
dep <- add_rejections(data_diff, alpha = 0.05, lfc = 2)
plot_volcano(dep, contrast = "Probe_vs_Competition", label_size = 2, add_names = TRUE, adjusted = TRUE)
plot_volcano(dep, contrast = "Vehicle_vs_Probe", label_size = 2, add_names = TRUE, adjusted = TRUE)
plot_volcano(dep, contrast = 'Vehicle_vs_Competition', label_size = 2, add_names = TRUE, adjusted = TRUE)
dep_tbl <- get_results(dep)
write_csv(dep_tbl, "dep_output.csv")
dep_tbl
p.val.cut <- 0.05
ratio.cut <- 1
plot.tbl <- dep_tbl %>%
mutate(accent =
if_else((Probe_vs_Competition_p.adj < p.val.cut &
abs(Probe_vs_Competition_ratio) > ratio.cut
),
TRUE, FALSE))
plot.tbl %>%
ggplot(aes(x=Probe_vs_Competition_ratio, y = -log10(Probe_vs_Competition_p.adj),
col = accent)) +
geom_point(alpha = 0.25, size= 0.75) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = c(-ratio.cut, ratio.cut), linetype = 2, color = "grey40") +
geom_hline(yintercept = -log10(p.val.cut), linetype = 2, color = "grey40") +
scale_color_manual(values = c("grey60", "dodgerblue3"), guide = F) +
geom_text_repel(data = plot.tbl %>%
dplyr::filter(accent),
aes(label = name),
hjust = 0.5,
color = "dodgerblue3",
size = 2.5) +
annotate("text", x = 3, y = -log10(p.val.cut), label = "Probe",
vjust = -0.2, hjust = 1, size = 2.5) +
annotate("text", x = -3, y = -log10(p.val.cut), label = "Comp.",
vjust = -0.2, hjust = 0, size = 2.5) +
scale_x_continuous(limits = c(-3,3), breaks = c(-3,-2,-1,0,1,2,3)) +
labs(x = expression("Log"[2]*"(Enrichment)"),
y = expression("-Log"[10]*"(adj.p.value)")) +
theme_bw() +
theme(panel.grid = element_blank(),
text = element_text(size = 10, color = 'black'))
ggsave("volcano_probe_vs_competitor_3in_2.png", width = 2, height = 2, units = "in", dpi  = 300)
plot.tbl <- dep_tbl %>%
mutate(accent =
if_else((Vehicle_vs_Competition_p.adj < p.val.cut &
abs(Vehicle_vs_Competition_ratio) > ratio.cut),
TRUE, FALSE))
plot.tbl %>%
ggplot(aes(x=-Vehicle_vs_Competition_ratio, y = -log10(Vehicle_vs_Competition_p.adj),
col = accent)) +
geom_point(alpha = 0.25, size= 0.75) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = c(-ratio.cut, ratio.cut), linetype = 2, color = "grey40") +
geom_hline(yintercept = -log10(p.val.cut), linetype = 2, color = "grey40") +
scale_color_manual(values = c("grey60", "dodgerblue3"), guide = F) +
geom_text_repel(data = plot.tbl %>%
dplyr::filter(accent),
aes(label = name),
hjust = 0.5,
color = "dodgerblue3",
size = 2) +
annotate("text", x = 3.5, y = -log10(p.val.cut), label = "Comp.",
vjust = -0.2, hjust = 1, size = 2) +
annotate("text", x = -3.5, y = -log10(p.val.cut), label = "Veh.",
vjust = -0.2, hjust = 0, size = 2) +
scale_x_continuous(limits = c(-3.5,3.5), breaks = c(-3,-2,-1,0,1,2,3)) +
labs(x = expression("Log"[2]*"(Enrichment)"),
y = expression("-Log"[10]*"(adj.p.value)")) +
theme_bw() +
theme(panel.grid = element_blank(),
text = element_text(size = 10, color = 'black'))
ggsave("volcano_competitor_vs_vehicle_2in_2.png", width = 2, height = 2, units = "in", dpi  = 300)
plot.tbl <- dep_tbl %>%
mutate(cond1 = Vehicle_vs_Probe_p.adj < 0.05,
cond2 = abs(Vehicle_vs_Probe_ratio) > 1,
accent =
if_else((Vehicle_vs_Probe_p.adj < 0.05 &
abs(Vehicle_vs_Probe_ratio) > 1),
TRUE, FALSE))
plot.tbl %>%
ggplot(aes(x=-Vehicle_vs_Probe_ratio, y = -log10(Vehicle_vs_Probe_p.adj),
col = accent)) +
geom_point() +
geom_vline(xintercept = 0) +
geom_vline(xintercept = c(-1, 1), linetype = 2, color = "grey40") +
geom_hline(yintercept = -log10(0.05), linetype = 2, color = "grey40") +
scale_color_manual(values = c("grey60", "dodgerblue"), guide = F) +
geom_text_repel(data = plot.tbl %>%
dplyr::filter(accent),
aes(label = name),
hjust = 1,
color = "dodgerblue") +
annotate("text", x = 5, y = -log10(0.05), label = "Probe",
vjust = -0.2, hjust = 1) +
annotate("text", x = -5, y = -log10(0.05), label = "Vehicle",
vjust = -0.2, hjust = 0) +
scale_x_continuous(limits = c(-5,5), breaks = c(-4,-2,0,2,4)) +
labs(x = expression("Log"[2]*"(Enrichment)"),
y = expression("-Log"[10]*"(adj.p.value)")) +
theme_bw() +
theme(panel.grid = element_blank())
ggsave("volcano_probe_vs_vehicle_4in_2.png", width = 4, height = 4, units = "in", dpi  = 300)
