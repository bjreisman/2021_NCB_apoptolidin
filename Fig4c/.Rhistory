dev.off()
setwd("~/apoptolidin/Fig5b")
library(tidyverse)
list.files(pattern = "csv")
mydata <- read_csv("chimerism_day28_rep1.csv") %>%
gather(compartment, chimerism, Blood, BM, SPL)
library(ggpubr)
mydata %>%
ggplot(aes(x=Group, y = chimerism, group = Group)) +
geom_point() +
facet_grid(.~compartment)
mypal0 <- c("black","#bcbddc", "#756bb1")
mypal <- c("black","#edb5d3", "#d01d8a")
mydata
#?geom_errorbar
fig5b <- mydata %>%
group_by(Group, compartment) %>%
mutate(mean = mean(chimerism),
sem = sqrt(var(chimerism)/n()),
err.min = mean - sem,
err.max = mean + sem) %>%
mutate(Group = as.factor(Group)) %>%
mutate(Group = fct_relevel(Group, "Vehicle")) %>%
ggplot(aes(y = chimerism, fill = Group, x = Group, color = Group)) +
geom_errorbar(aes(ymin = err.min, ymax = err.max, y = mean), width = 0.5,
color = "black") +
geom_errorbar(aes(ymin = mean, ymax = mean, y = mean), width = 1,
color = "black") +
geom_point(position = position_jitter(width = 0.2),
size  = 1) +
theme_classic()  +
geom_signif(map_signif_level = T,
comparisons = list(c("Vehicle", "AmmoA_0.1"),
c("Vehicle", "AmmoA_0.03"),
c("AmmoA_0.1", "AmmoA_0.03")
),
y_position = c(80, 75, 70),
textsize = 2,
test = "wilcox.test",
tip_length = 0) +
scale_color_manual(values = mypal) +
scale_fill_manual(values = mypal) +
facet_grid(.~compartment, switch  = "x") +
theme(legend.position = "bottom", axis.title.x = element_blank(),
axis.text.x = element_blank(),
strip.placement = "outside",
axis.ticks.x = element_blank(),
strip.background = element_blank(),
text = element_text(size = 7))
#fig5b <-
mydata %>%
group_by(Group, compartment) %>%
mutate(mean = mean(chimerism),
sem = sqrt(var(chimerism)/n()),
err.min = mean - sem,
err.max = mean + sem) %>%
mutate(Group = as.factor(Group)) %>%
mutate(Group = fct_relevel(Group, "Vehicle")) %>%
ggplot(aes(y = chimerism, fill = Group, x = Group, color = Group)) +
geom_errorbar(aes(ymin = err.min, ymax = err.max, y = mean), width = 0.5,
color = "black") +
geom_errorbar(aes(ymin = mean, ymax = mean, y = mean), width = 1,
color = "black") +
geom_point(position = position_jitter(width = 0.2),
size  = 1) +
theme_classic()  +
stat_compare_means(
comparisons = list(c("Vehicle", "AmmoA_0.1"),
c("Vehicle", "AmmoA_0.03"),
c("AmmoA_0.1", "AmmoA_0.03")),
hide.ns = TRUE,
method = "wilcox.test"
) +
# geom_signif(map_signif_level = T,
#             comparisons = list(c("Vehicle", "AmmoA_0.1"),
#                                c("Vehicle", "AmmoA_0.03"),
#                                c("AmmoA_0.1", "AmmoA_0.03")
#             ),
#             y_position = c(80, 75, 70),
#             textsize = 2,
#             test = "wilcox.test",
#             tip_length = 0) +
scale_color_manual(values = mypal) +
scale_fill_manual(values = mypal) +
facet_grid(.~compartment, switch  = "x") +
theme(legend.position = "bottom", axis.title.x = element_blank(),
axis.text.x = element_blank(),
strip.placement = "outside",
axis.ticks.x = element_blank(),
strip.background = element_blank(),
text = element_text(size = 7))
library(rstatix)
mydata %>%
group_by(Group, compartment) %>%
mutate(mean = mean(chimerism),
sem = sqrt(var(chimerism)/n()),
err.min = mean - sem,
err.max = mean + sem) %>%
mutate(Group = as.factor(Group)) %>%
mutate(Group = fct_relevel(Group, "Vehicle")) %>%
group_by(compartment) %>%
wilcox_test(chimerism ~ Group,  comparisons = list(c("Vehicle", "AmmoA_0.1"),
c("Vehicle", "AmmoA_0.03"),
c("AmmoA_0.1", "AmmoA_0.03")),
p.adjust.method = "holm",
alternative = "two.sided") %>%
write_csv("wilcox.csv")
######
df <- tibble::tribble(
~sample_type, ~expression, ~cancer_type,   ~gene,
"cancer",        25.8,       "Lung", "Gene1",
"cancer",        25.5,      "Liver", "Gene1",
"cancer",        22.4,      "Liver", "Gene1",
"cancer",        21.2,       "Lung", "Gene1",
"cancer",        24.5,      "Liver", "Gene1",
"cancer",        27.3,      "Liver", "Gene1",
"cancer",        30.9,      "Liver", "Gene1",
"cancer",        17.6,     "Breast", "Gene1",
"cancer",        19.7,       "Lung", "Gene1",
"cancer",         9.7,     "Breast", "Gene1",
"cancer",        15.2,     "Breast", "Gene2",
"cancer",        26.4,      "Liver", "Gene2",
"cancer",        25.8,       "Lung", "Gene2",
"cancer",         9.7,     "Breast", "Gene2",
"cancer",        21.2,       "Lung", "Gene2",
"cancer",        24.5,      "Liver", "Gene2",
"cancer",        14.5,     "Breast", "Gene2",
"cancer",        19.7,       "Lung", "Gene2",
"cancer",        25.2,       "Lung", "Gene2",
"normal",        43.5,       "Lung", "Gene1",
"normal",        76.5,      "Liver", "Gene1",
"normal",        21.9,     "Breast", "Gene1",
"normal",        69.9,      "Liver", "Gene1",
"normal",       101.7,      "Liver", "Gene1",
"normal",        80.1,      "Liver", "Gene1",
"normal",        19.2,     "Breast", "Gene1",
"normal",        49.5,       "Lung", "Gene1",
"normal",        34.5,     "Breast", "Gene1",
"normal",        51.9,       "Lung", "Gene1",
"normal",        67.5,       "Lung", "Gene2",
"normal",          30,     "Breast", "Gene2",
"normal",        76.5,      "Liver", "Gene2",
"normal",        88.5,      "Liver", "Gene2",
"normal",        69.9,      "Liver", "Gene2",
"normal",        49.5,       "Lung", "Gene2",
"normal",        80.1,      "Liver", "Gene2",
"normal",        79.2,      "Liver", "Gene2",
"normal",        12.6,     "Breast", "Gene2",
"normal",        97.5,      "Liver", "Gene2",
"normal",        64.5,      "Liver", "Gene2"
)
setwd("~/apoptolidin/Fig4c")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(platetools)
library(drc)
list.files()
#exp_name <- "20210116_mv411-Crispr" #no spaces or periods pls
rep(LETTERS[1:8], times = 12)
platemap1 <- tibble(
row = rep(LETTERS[1:8], times = 12), #A:H repeated 12 times
col = rep(1:12, each = 8), # 1:12, each one repeated 8 times
well = paste0(row, str_pad(col, 2, 'left', "0")), #put the row and col together, making sure to left pad the numbers so 9 comes before 10
plate = "Plate1",
compound = rep(rep(
c("Apoptolidin A",
"Ammocidin A",
"Oligomycin A",
"Puromycin"), #which compound goes in each column
each = 24), times = 1),
# conc = rep(c(
#   c(sqrt(10) * 100 / sqrt(10) ^ (0:6), 0),
#   c(sqrt(10) * 100 / sqrt(10) ^ (0:6), 0),
#   #7 serial dilutions + 0
#   c(sqrt(10) * 10 / sqrt(10) ^ (0:6), 0),
#   # serial dilutions for 7:9
#   c(sqrt(10) * 10000 / sqrt(10) ^ (0:6), 0)
# ), times = 3)
conc = c(
rep(c(10 * 100 / sqrt(10) ^ (0:6), 0), times = 3),
rep(c(sqrt(10) * 100 / sqrt(10) ^ (0:6), 0), times = 3),
rep(c(sqrt(10) * 10 / sqrt(10) ^ (0:6), 0), times = 3),
rep(c(sqrt(10) * 10000 / sqrt(10) ^ (0:6), 0), times = 3)
)) %>%  #which cell lines
mutate(conc = signif(conc, 3)) #round doses to three sig figs
platemap2 <- tibble(
row = rep(LETTERS[1:8], times = 12), #A:H repeated 12 times
col = rep(1:12, each = 8), # 1:12, each one repeated 8 times
well = paste0(row, str_pad(col, 2, 'left', "0")), #put the row and col together, making sure to left pad the numbers so 9 comes before 10
plate = "Plate2",
compound = rep(rep(
c("Efrapapetin F",
"Aurovertin D",
"IACS-010759",
"Apoptolidin H"), #which compound goes in each column
each = 24), times = 1),
# conc = rep(c(
#   c(sqrt(10) * 100 / sqrt(10) ^ (0:6), 0),
#   c(sqrt(10) * 100 / sqrt(10) ^ (0:6), 0),
#   #7 serial dilutions + 0
#   c(sqrt(10) * 10 / sqrt(10) ^ (0:6), 0),
#   # serial dilutions for 7:9
#   c(sqrt(10) * 10000 / sqrt(10) ^ (0:6), 0)
# ), times = 3)
conc = c(
rep(c(1 * 100 / sqrt(10) ^ (0:6), 0), times = 3),
rep(c(sqrt(10) * 100 / sqrt(10) ^ (0:6), 0), times = 3),
rep(c(1 * 100 / sqrt(10) ^ (0:6), 0), times = 3),
rep(c(sqrt(10) * 1000 / sqrt(10) ^ (0:6), 0), times = 3)
)) %>%  #which cell lines
mutate(conc = signif(conc, 3)) #round doses to three sig figs
platemap <- bind_rows(platemap1, platemap2)
# write_csv(platemap, #the map we just made
#          paste0("platemap.csv")) #writing the platemap
```
list.files() #find your platemap
readplate <- function(filename, lines_to_skip, platemap) {
plate.md <- read_lines(filename,
skip = lines_to_skip-1,
n_max = 1)
wavelength <- str_split(plate.md, pattern = "\t", simplify = T)[16]
data.raw <-
read_tsv(filename, skip = lines_to_skip)[1:8, 3:14] %>%
print() %>%
mutate(row = LETTERS[1:8]) %>%
dplyr::select(row, everything()) %>%
gather(
col, abs, -row) %>%
mutate(col = as.numeric(col)) %>%
arrange(col, row) %>%
left_join(platemap) %>%
mutate(filename = filename)
}
plotplate <- function(tidyplate, well = "well", response = "abs") {
tidyplate <- as.data.frame(tidyplate)
edges <- tibble(Row = c(0.5,0.25, 0.25,8.75,8.75),
Column = c(0.25,0.5, 12.75, 12.75, 0.25)) #plate shaped border
plot.i <- platetools::raw_map(
data = tidyplate[,response],
well = tidyplate[,well],
plate = 96) +
geom_polygon(data = edges, col = "black", fill = NA) +
theme_minimal() +
scale_fill_continuous(name = response) +
theme(panel.grid = element_blank())
return(plot.i)
}
list.files(pattern = "*.txt")
mydata <- do.call("rbind", sapply(list.files(pattern = "*.txt"), readplate, 17, platemap, simplify = F))  %>%
separate(filename, c("date", "line", "subline", "plate"), sep = "_") %>%
dplyr::select(-date) %>%
mutate(plate = gsub(".txt", "", plate))
mydata <- mydata %>%
dplyr::select(row, col, abs, well, line, subline, plate) %>%
group_by(row, col, well, subline, plate) %>%
slice(1) %>%
left_join(platemap)
mydata.0 <-
mydata %>%
dplyr::filter(conc == 0) %>%
dplyr::select(-compound) %>%
group_by(subline) %>%
summarise(abs.0 = mean(abs - 0.05),
abs.0.sd = sd(abs - 0.05))
mydata.0
# line.lut <- tibble(line = unique(mydata$line)) %>%
#   arrange(line) %>%
#   mutate(line.short = c("ATP5C-L102R-C3", "ATP5C-L102R-C4","Parental"))
#
# line.lut
```
```{r Fig3D}
mydata.norm <-
mydata %>%
left_join(mydata.0) %>%
mutate(abs = abs - 0.05) %>%
mutate(abs.norm = abs/abs.0) %>%
mutate(drop = if_else(subline == "ATP5C-L102R" & plate == "Plate2" & row == "A"& col == "8", TRUE, FALSE)) %>%
filter(drop == FALSE)
# %>%
#  dplyr::filter(line != 'blank') %>%
filter(line == "K562")
#   ggplot(aes(x=conc,  y = abs.norm, col = line)) +
#   geom_point() +
#   geom_smooth() +
#   facet_grid(compound~parental, space = "free_x", scale = "free_x") +
#   scale_x_log10()
# unique(mydata$line)
# mydata %>%
#   filter(parental == "MV411", line == "ATP5C-L102R-C01", is.na(CK)) %>%
#   plotplate()
#
subline.i <- "ATP5C-L102R"
#subline.i <- "ATP5B-I437Y"
mydata %>%
filter(line == "K562", subline == subline.i, plate == "Plate1") %>%
plotplate() +
scale_fill_distiller(palette = 12, direction = 1)
mydata %>%
#  mutate(drop = FALSE) %>%
mutate(drop = if_else(subline == "ATP5C-L102R" & plate == "Plate2" & row == "A"& col == "8", TRUE, FALSE)) %>%
filter(drop == FALSE) %>%
# filter(subline == "ATP5C-L102R", plate == "Plate2", row == "A", col == "8") %>%
filter(line == "K562", subline == subline.i, plate == "Plate2")# %>%
plotplate() +
scale_fill_distiller(palette = 12, direction = 1)
#?drm
mydata.norm <- mydata.norm %>%
arrange(desc(subline))
drc.ammoA <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Ammocidin A"), fct = LL.4())
plot(drc.ammoA)
drc.apoA <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Apoptolidin A"), fct =  LL.4(),
separate = T)
drc.olmA <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Oligomycin A"), fct = LL.4(),
separate = T)
drc.puro <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Puromycin"), fct = LL.4())
drc.efr <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Efrapapetin F"), fct = LL.4())
drc.aur <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Aurovertin D"), fct = LL.4())
drc.aur <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Aurovertin D"), fct = LL.4())
drc.iacs <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "IACS-010759"), fct = LL.4())
drc.apoH <- drm(abs.norm ~ conc, subline,
data = mydata.norm %>%
dplyr::filter(compound == "Apoptolidin H"), fct = LL.4())
plot(drc.aur)
plot(drc.efr)
plot(drc.iacs, normal = T)
plot(drc.apoH)
#dev.off()
plot(drc.apoA)
plot(drc.ammoA)
plot(drc.olmA)
plot(drc.puro)
mydata.norm <- mydata.norm %>%
arrange(desc(line))
suffix <- "K562-1"
dev.off()
#mypal <- c("black", "#43a3c8")
mypal <- palette.colors(4)
par(mfrow = c(1,4), mar = c(4.1, 2.6, 1.1, 1.1))
myylim <- c(0,1.2)
myyt <- seq(myylim[1], myylim[2], by = 0.2)
myytlab <- myyt
myytlab[seq(length(myyt)) %% 2 == 1] <- ""
plot(drc.apoA,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
#     legend = F,
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.1, #breakpoint for 0
xlab = "[Apoptolidin A] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(100, 0.6)
)
plot(drc.ammoA,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.1, #breakpoint for 0
xlab = "[Ammocidin A] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(10, 0.5)
)
plot(drc.olmA,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
legend = F,
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "[Oligomycin A] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(1, 0.5)
)
plot(drc.puro,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 10, #breakpoint for 0
xlab = "[Puromycin] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(1000, 0.5)
)
dev.off() #this line turns off the png device and redirects plots towards rstudio
#mypal <- c("black", "#43a3c8")
mypal <- palette.colors(4)
par(mfrow = c(1,4), mar = c(4.1, 2.6, 1.1, 1.1))
myylim <- c(0,1.2)
myyt <- seq(myylim[1], myylim[2], by = 0.2)
myytlab <- myyt
myytlab[seq(length(myyt)) %% 2 == 1] <- ""
plot(drc.apoH,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#     legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 1, #breakpoint for 0
xlab = "[Apoptolidin H] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(1000, 0.5)
)
plot(drc.efr,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
legend = F,
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "standard", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "[Efrapeptin F] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(10, 0.5)
)
plot(drc.aur,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
legend = F,
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.1, #breakpoint for 0
xlab = "[Aurovertin D] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(100, 0.6)
)
plot(drc.iacs,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
broken = T, #break in the xaxis for 0?
conName = "Veh",
legend = F,
xtsty = "standard", #xaxis ticks base10 or standard
bp = 0.01, #breakpoint for 0
xlab = "[IACS-010759] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(1, 0.5)
)
dev.off() #this line turns off the png device and redirects plots towards rstudio
plot(drc.apoH,
type = "average", #what to plot (average, all, bars, none, obs, or confidence)
#  normal = T, #normalize curves? NOTE: THIS DO  ESN't WORK WELL, HIGHLY SUGGEST DOING IT YOURSELF
col = mypal, #color?
#     legend = F,
broken = T, #break in the xaxis for 0?
conName = "Veh",
xtsty = "base10", #xaxis ticks base10 or standard
bp = 0.1, #breakpoint for 0
xlab = "[Apoptolidin A] (nM)", #x label
ylab = NA,
yt = myyt,
ytlab = myytlab,
ylim = myylim,
legendPos = c(100, 0.6)
)
